// bot/handlers.ts
import { searchMedia, formatMediaList, formatMediaDetails } from './helpers';
import { MediaItem } from '@/types/api';

interface Session {
  results?: MediaItem[];
  currentPage?: number;
}

type MyContext = import('grammy').Context & { session: Session };

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
export const startHandler = async (ctx: MyContext) => {
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞, –∞–Ω–∏–º–µ –∏–ª–∏ –¢–í-—à–æ—É.');
};

export const searchHandler = async (ctx: MyContext) => {
  const text = ctx.message?.text;
  if (typeof text !== 'string' || !text.trim()) return;
  
  const query = text.trim();
  
  try {
    const results = await searchMedia(query);
    if (!results.length) {
      await ctx.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏—é
    ctx.session.results = results;
    ctx.session.currentPage = 0;
    
    const keyboard = formatMediaList(results, 0);
    await ctx.reply('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', { reply_markup: keyboard });
  } catch (error) {
    console.error('Search error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

export const showItemHandler = async (ctx: MyContext) => {
  try {
    const id = parseInt(ctx.match?.[1] || '0');
    const results = ctx.session?.results || [];
    const item = results.find((r: MediaItem) => r.id === id);
    
    if (!item) {
      await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const details = await formatMediaDetails(item);
    await ctx.editMessageText(details.text, {
      reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: `back_${id}` }]],
      },
      parse_mode: 'HTML',
    });
    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error('Item display error:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
};

export const backToListHandler = async (ctx: MyContext) => {
  try {
    const results = ctx.session?.results || [];
    const page = ctx.session?.currentPage || 0;
    const keyboard = formatMediaList(results, page);
    await ctx.editMessageText('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', { reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error('Back error:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
};

export const paginationHandler = async (ctx: MyContext) => {
  try {
    const page = parseInt(ctx.match?.[1] || '0');
    const results = ctx.session?.results || [];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    ctx.session.currentPage = page;
    
    const keyboard = formatMediaList(results, page);
    await ctx.editMessageText('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', { reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error('Pagination error:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
};