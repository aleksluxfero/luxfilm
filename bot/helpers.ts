// bot/helpers.ts
import axios from 'axios';
import { MediaItem, ApiResponse } from '@/types/api';

const API_BASE = 'https://portal.lumex.host/api';
const API_TOKEN = process.env.API_TOKEN;

export async function searchMedia(query: string): Promise<MediaItem[]> {
  const endpoints = [
    `${API_BASE}/movies?api_token=${API_TOKEN}&query=${encodeURIComponent(query)}&limit=20`,
    `${API_BASE}/animes?api_token=${API_TOKEN}&query=${encodeURIComponent(query)}&limit=20`,
    `${API_BASE}/tv-series?api_token=${API_TOKEN}&query=${encodeURIComponent(query)}&limit=20`,
    `${API_BASE}/anime-tv-series?api_token=${API_TOKEN}&query=${encodeURIComponent(query)}&limit=20`,
    `${API_BASE}/show-tv-series?api_token=${API_TOKEN}&query=${encodeURIComponent(query)}&limit=20`,
  ];

  const results: MediaItem[] = [];
  
  for (const url of endpoints) {
    try {
      const res = await axios.get<ApiResponse>(url);
      results.push(...res.data.data);
    } catch (e) {
      console.error('API request error:', e);
    }
  }

  results.sort((a, b) => new Date(a.released).getTime() - new Date(b.released).getTime());
  return results.slice(0, 20);
}

export function formatMediaList(items: MediaItem[], page: number) {
  const perPage = 5;
  const start = page * perPage;
  const pageItems = items.slice(start, start + perPage);

  const buttons = pageItems.map((item) => [
    { text: item.ru_title, callback_data: `item_${item.id}` },
  ]);

  const navButtons: { text: string; callback_data: string }[] = [];
  if (page > 0) navButtons.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `page_${page - 1}` });
  if (items.length > start + perPage)
    navButtons.push({ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: `page_${page + 1}` });

  if (navButtons.length) buttons.push(navButtons);

  return { inline_keyboard: buttons };
}

export async function getRating(kinopoiskId: number): Promise<number> {
  try {
    const url = `https://rating.kinopoisk.ru/${kinopoiskId}.xml`;
    const res = await axios.get<string>(url);
    const xmlText = res.data;
    
    // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
    const match = xmlText.match(/<kp_rating[^>]*>([^<]+)<\/kp_rating>/);
    if (match && match[1]) {
      const rating = parseFloat(match[1]);
      return isNaN(rating) ? 0 : Math.round(rating * 10) / 10;
    }
    return 0;
  } catch (e) {
    console.error('Rating fetch error:', e);
    return 0;
  }
}

export async function formatMediaDetails(item: MediaItem) {
  const rating = await getRating(item.kinopoisk_id);
  const typeMap: Record<string, string> = {
    movie: '–§–∏–ª—å–º',
    'tv-series': '–°–µ—Ä–∏–∞–ª',
    anime: '–ê–Ω–∏–º–µ',
    'anime-tv-series': '–ê–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª',
    'show-tv-series': '–¢–í-—à–æ—É',
  };

  const type = typeMap[item.content_type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

  const text = `
üé¨ <b>${item.ru_title}</b> (${item.orig_title})

üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${item.orig_title}
üè∑Ô∏è –¢–∏–ø: ${type}
üìÖ –ì–æ–¥: ${new Date(item.released).getFullYear()}
üÜî –†–µ–π—Ç–∏–Ω–≥: <a href="https://www.kinopoisk.ru/film/${item.kinopoisk_id}">${rating}</a>
‚ñ∂Ô∏è <a href="${item.iframe_src}">–°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω</a>
`.trim();

  return { text };
}